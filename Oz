% Triangulo Pascal
declare  AddList ShifLeft ShifRight Pascal C 

fun {ShiftLeft L}
   case L of H|T then
      H|{ShiftLeft T}
   else [0]
   end
end

fun {ShiftRight L}  0|L end

fun {AddList L1 L2}
   case L1 of H1|T1 then
      case L2 of H2|T2 then
	 H1+H2|{AddList T1 T2}
      end
   else nil end
end


C={NewCell 0}
fun {Pascal N}
     
   C := @C + 1
   {Browse @C}
   if N==1 then [1]
   else
      {AddList
       {ShiftLeft {Pascal N-1}}
       {ShiftRight {Pascal N-1}}}
   end
end
 
%Triang. Pascal mejorado
declare T FastPascal
T = {NewCell 0}
fun {FastPascal N}
   T := @T+1
   {Browse @T}
   if N==1 then [1]
   else
       	local L in
	   L={FastPascal N-1}
	   {AddList {ShiftLeft L} {ShiftRight L}}
	end
   end
%   {Browse @T}
end
{Browse {FastPascal 20}}
% -------------------- 
%Funciones perezosas
declare
fun lazy {Ints N}
   N|{Ints N+1}
end

declare 
   L = {Ints 0}
   {Browse L}
   case L of A|B|C|_ then {Browse A+B+C} end

  % {Browse L.2}
% -------------------- 
  % {Browse L.2.1}
% --------------------
  % {Browse L.2.2}
% -------------------- 
  % {Browse L.1}
% -------------------- 
  % {Browse L.2}
%--------------------
  % {Browse L.2.2}

% ------------------
%Calculos por demanda
declare
fun lazy {PascalList Row}
   Row | {PascalList 
          {AddList 
		{ShiftLeft Row}
		{ShiftRight Row}}}
end
% -------------------- 
declare
fun lazy {PascalList Row}
   Row | {PascalList 
          {AddList 
		{ShiftLeft Row}
		{ShiftRight Row}}}
end
% -------------------- 
declare
fun lazy {PascalList Row}
   Row | {PascalList 
          {AddList 
		{ShiftLeft Row}
		{ShiftRight Row}}}
end

declare
L = {PascalList [1]}
{Browse L}
{Browse L.1}
{Browse L.2.1}

%---------
declare N

declare
fun {PascalList2 Row}
   if N==1 then[Row]
   else
      Row|{PascaList2 N-1
	   {AddList {ShiftLeft Row}
	    {ShiftRight Row}}}
   end
end
{Browse {PascalList2 5[1]}}


%----------------------
%Programacion de alto orden
declare
fun {Xor X Y} 
	if X==Y then 0 else 1 end
end

% -------------------- 
declare Xor GenericPascal
fun {Xor X Y} if X==Y then 0 else 1 end end

fun {GenericPascal Op N}
   if N==1 then [1]
   else L in L = {GenericPascal Op N-1}
      {OpList  Op {ShiftLeft L} {ShiftRight L}}
   end
end
fun {OpList Op L1 L2} 
	case L1 of H1|T1 then
		case L2 of H2|T2 then
	 	      {Op H1 H2}|{OpList Op T1 T2}
		end
      	else nil end
end

declare Add Xor
fun {Add N1 N2} N1+N2 end
declare
fun {Xor X Y} 
	if X==Y then 0 else 1 end
end

fun {FastPascal N} {GenericPascal Add N} end
fun {ParidadPascal N} 
	{GenericPascal Xor N} 
end


% --------------------
declare 
C = {NewCell 0}
declare
fun {FastPascal N}
	{Assign C {Access C}+1}
	{GenericPascal Add N}
end


% -------------------- 
%{Browse {Access C}}

thread
   P in
   P = {FastPascal 21}
  % {Browse P}
end

%-----------------------Objetos
declare
fun{FastPascal N}
  % {Browse {Increm}}
   {GenericPascal Add N}
end

declare
local C in
   C = {NewCell 0}
   fun{Increm}
      {Assign C {Access C} + 1}
      {Access C}
   end
end

%------------ Clases
declare
fun{NuevoContador}
   local C increm Leer in
      C={NewCell 0}
      fun{Increm}
	 {Assign C{Access C}+1}
	 {Access C}
      end
      fun{Leer}
	 {Access C}
      end
      contador(increm:Increm leer:Leer)
   end
end

declare
Ctr1={NuevoContador}
Ctr2={NuevoContador}
{Browse 'Objetos'}
{Browse {Ctr1.increm}}
{Browse {Ctr2.increm}}



